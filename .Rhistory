View(parsed)
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
key = NULL
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
parsed$title
speed_score <- parsed$ruleGroups$SPEED$score
speed_score
as.data.frame(parsed$pageStats)
parsed$loadingExperience
FCP <- parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$distributions
FCP
parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median
FCP <- data.frame(fcp_median <- parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category <- parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
FCP
FCP$fcp_median....parsed.loadingExperience.metrics.FIRST_CONTENTFUL_PAINT_MS.median
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
FCP
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
fcp_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
DCL
single_results <- data.frame(title = parsed$title,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
fcp_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
View(full_results)
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
fcp_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
get_pagespeed <- function(
url = NULL,
key = NULL,
filter_tpr = NULL,
locale = NULL,
rule = NULL,
screenshot = NULL,
snapshots = NULL,
strategy = NULL,
utm_campaign = NULL,
utm_source = NULL,
fields = NULL
) {
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
# Extract all values
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
fcp_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
full_results
}
jag <- get_pagespeed("http://www.jaguar.co.u.k")
View(ag)
View(jag)
get_pagespeed <- function(
ps_url = NULL,
key = NULL,
filter_tpr = NULL,
locale = NULL,
rule = NULL,
screenshot = NULL,
snapshots = NULL,
strategy = NULL,
utm_campaign = NULL,
utm_source = NULL,
fields = NULL
) {
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = ps_url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
# Extract all values
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
fcp_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
full_results
}
jag <- get_pagespeed("http://www.jaguar.co.u.k")
jag
ps_url <- "http://www.jaguar.co.uk"
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = ps_url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
req$headers
req$status_code
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
# Extract all values
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
fcp_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
full_results
get_pagespeed(ps_url = "http://www.jaguar.co.uk")
library(tidyverse)
urls <- list("http://www.jaguar.co.uk", "http://www.bmw.co.uk", "http://www.mercedes.co.uk", "http://www.landrover.co.uk", "http://www.audi.co.uk")
prem_pages <- map_df(urls, get_pagespeed)
View(prem_pages)
library(tidyverse)
urls <- list("http://www.jaguar.co.uk", "http://www.bmw.co.uk", "http://www.mercedes.co.uk", "http://www.landrover.co.uk", "http://www.audi.co.uk")
prem_pages <- map_df(urls, get_pagespeed)
# Metrics reference https://developers.google.com/web/tools/chrome-user-experience-report/#metrics
get_pagespeed <- function(
ps_url = NULL,
key = NULL,
filter_tpr = NULL,
locale = NULL,
rule = NULL,
screenshot = NULL,
snapshots = NULL,
strategy = NULL,
utm_campaign = NULL,
utm_source = NULL,
fields = NULL
) {
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = ps_url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
# Extract all values
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
dcl_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
full_results
}
library(tidyverse)
urls <- list("http://www.jaguar.co.uk", "http://www.bmw.co.uk", "http://www.mercedes.co.uk", "http://www.landrover.co.uk", "http://www.audi.co.uk")
prem_pages <- map_df(urls, get_pagespeed)
warnings()
View(prem_pages)
# Metrics reference https://developers.google.com/web/tools/chrome-user-experience-report/#metrics
#'
#'
#' @param ps_url
#' The URL which you'd like to analyse
#' @param key
#' The API key (not required) which you'll be using to query the Google API
#' @param filter_tpr
#'	Indicates if third party resources should be filtered out before PageSpeed analysis. (boolean)
#' @param locale
#' The locale used to localize formatted results (string)
#' @param rule
#' A PageSpeed rule to run; if none are given, all rules are run (string)
#' @param screenshot
#' Indicates if binary data containing a screenshot should be included (boolean)
#' @param snapshots
#' Indicates if binary data containing snapshot images should be included (boolean)
#' @param strategy
#' 	The analysis strategy (desktop or mobile) to use, and desktop is the default (string)
#' @param utm_campaign
#' Campaign name for analytics. (string)
#' @param utm_source
#' 	Campaign source for analytics. (string)
#' @param fields
#' Selector specifying which fields to include in a partial response.
#'
#' @return
#' Returns a data frame containing key pagespeed insights for the given request
#'
#' @export
#'
#' @examples
#' jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", key = "my_key", strategy = "desktop")
#'
#' See also metrics reference at https://developers.google.com/web/tools/chrome-user-experience-report/#metrics
get_pagespeed <- function(
ps_url = NULL,
key = NULL,
filter_tpr = NULL,
locale = NULL,
rule = NULL,
screenshot = NULL,
snapshots = NULL,
strategy = NULL,
utm_campaign = NULL,
utm_source = NULL,
fields = NULL
) {
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = ps_url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
# Extract all values
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
dcl_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
full_results
}
jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", key = "my_key", strategy = "desktop")
# Metrics reference https://developers.google.com/web/tools/chrome-user-experience-report/#metrics
#'
#'
#' @param ps_url
#' The URL which you'd like to analyse
#' @param key
#' The API key (not required) which you'll be using to query the Google API
#' @param filter_tpr
#'	Indicates if third party resources should be filtered out before PageSpeed analysis. (boolean)
#' @param locale
#' The locale used to localize formatted results (string)
#' @param rule
#' A PageSpeed rule to run; if none are given, all rules are run (string)
#' @param screenshot
#' Indicates if binary data containing a screenshot should be included (boolean)
#' @param snapshots
#' Indicates if binary data containing snapshot images should be included (boolean)
#' @param strategy
#' 	The analysis strategy (desktop or mobile) to use, and desktop is the default (string)
#' @param utm_campaign
#' Campaign name for analytics. (string)
#' @param utm_source
#' 	Campaign source for analytics. (string)
#' @param fields
#' Selector specifying which fields to include in a partial response.
#'
#' @return
#' Returns a data frame containing key pagespeed insights for the given request
#'
#' @export
#'
#' @examples
#' jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", key = "my_key", strategy = "desktop")
#'
#' See also metrics reference at https://developers.google.com/web/tools/chrome-user-experience-report/#metrics
get_pagespeed <- function(
ps_url = NULL,
key = NULL,
filter_tpr = NULL,
locale = NULL,
rule = NULL,
screenshot = NULL,
snapshots = NULL,
strategy = NULL,
utm_campaign = NULL,
utm_source = NULL,
fields = NULL
) {
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = ps_url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
# Extract all values
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
dcl_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
full_results
}
jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", key = "my_key", strategy = "desktop")
jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", strategy = "desktop")
# Metrics reference https://developers.google.com/web/tools/chrome-user-experience-report/#metrics
#'
#'
#' @param ps_url
#' The URL which you'd like to analyse
#' @param key
#' The API key (not required) which you'll be using to query the Google API
#' @param filter_tpr
#'	Indicates if third party resources should be filtered out before PageSpeed analysis. (boolean)
#' @param locale
#' The locale used to localize formatted results (string)
#' @param rule
#' A PageSpeed rule to run; if none are given, all rules are run (string)
#' @param screenshot
#' Indicates if binary data containing a screenshot should be included (boolean)
#' @param snapshots
#' Indicates if binary data containing snapshot images should be included (boolean)
#' @param strategy
#' 	The analysis strategy (desktop or mobile) to use, and desktop is the default (string)
#' @param utm_campaign
#' Campaign name for analytics. (string)
#' @param utm_source
#' 	Campaign source for analytics. (string)
#' @param fields
#' Selector specifying which fields to include in a partial response.
#'
#' @return
#' Returns a data frame containing key pagespeed insights for the given request
#'
#' @export
#'
#' @examples
#' jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", key = "my_key", strategy = "desktop")
#'
#' See also metrics reference at https://developers.google.com/web/tools/chrome-user-experience-report/#metrics
get_pagespeed <- function(
ps_url = NULL,
key = NULL,
filter_tpr = NULL,
locale = NULL,
rule = NULL,
screenshot = NULL,
snapshots = NULL,
strategy = NULL,
utm_campaign = NULL,
utm_source = NULL,
fields = NULL
) {
req <- httr::GET(url = "https://www.googleapis.com/pagespeedonline/v4/runPagespeed",
query = list(  url = ps_url,
key = key,
filter_tpr = filter_tpr,
locale = locale,
rule = rule,
screenshot = screenshot,
snapshots = snapshots,
strategy = strategy,
utm_campaign = utm_campaign,
utm_source = utm_source,
fields = fields))
stop_for_status(req)
if (http_type(req) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# Parse out our values
con <- content(req, "text")
parsed <- jsonlite::fromJSON(con)
# Extract all values
single_results <- data.frame(title = parsed$title,
url = parsed$loadingExperience$initial_url,
speed_score = parsed$ruleGroups$SPEED$score,
overall_category = parsed$loadingExperience$overall_category)
page_stats_df <- as.data.frame(parsed$pageStats)
FCP <- data.frame(fcp_median = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$median,
fcp_category = parsed$loadingExperience$metrics$FIRST_CONTENTFUL_PAINT_MS$category)
DCL <- data.frame(dcl_median = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$median,
dcl_category = parsed$loadingExperience$metrics$DOM_CONTENT_LOADED_EVENT_FIRED_MS$category)
full_results <- cbind(single_results, page_stats_df, FCP, DCL)
full_results
}
jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", strategy = "desktop")
jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", key = "my_key", strategy = "desktop")
jaguar <- get_pagespeed(ps_url = "http://www.jaguar.co.uk", strategy = "desktop")
View(jaguar)
devtools::document()
devtools::document()
library(googlePageSpeedR)
library(googlePageSpeedR)
library(googlePageSpeedR)
